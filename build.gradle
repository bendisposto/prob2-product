def uiVersion = '0.1.0-SNAPSHOT'
def probVersion = 'milestone-28-SNAPSHOT'

def targets = ["linux32", "linux64", "osx64", "win32"]
def serverTargetMapping = ["linux32": "linux32", "linux64": "linux64", "osx64": "leopard64", "win32": "win32"]
def target_params = ["osx64"   : ['--macIcns','icons/macIcon.icns'],
                     "linux32" : [],
                     "linux64" : [],
                     "win32"   : []]

def download(String address, String target) {
    def file = new FileOutputStream(target)
    def out = new BufferedOutputStream(file)
    out << new URL(address).openStream()
    out.close()
}

// ----------------------------------------
// Helper methods ...
// ----------------------------------------
def download_cspm(String target, String mode) {
    def String downloadFile = target
    def String postfix = ""
    if (target == "win32") {
        downloadFile = "windows"
        postfix = ".exe"
    }
    def String url = "http://nightly.cobra.cs.uni-duesseldorf.de/cspmf/cspmf-" + downloadFile
    println "Downloading cspm for " + target + " ..."
    def String dir = mode + "/build/cli/" + target + "_cli/cli/lib/cspmf" + postfix
    download(url, dir)
    new File(dir).setExecutable(true)
    println " done."
}


serverTargetMapping.each() { k, v ->
        task "downloadCli_${k}" << {
            download_cli(v, probVersion, project.name)
            download_cspm(v, project.name)
        }
}


task downloadArtifacts() << {
        download("http://nightly.cobra.cs.uni-duesseldorf.de/prob2/builds/tmp/resources.zip","resources.zip")
      	FileTree zip = zipTree("resources.zip")
      	copy {
      		from zip
      		into "./"
      	}
      	delete file("resources.zip")
        download("http://nightly.cobra.cs.uni-duesseldorf.de/prob2/builds/tmp/prob2.jar","resources/prob2.jar")
}


task npmDeps(type: Exec) {
        commandLine "npm", 'install', '-g', 'node-webkit-builder'
}

targets.each() { target ->
        task "buildClient_${target}"(dependsOn: [downloadArtifacts, npmDeps], type: Exec) {
           executable "nwbuild"
           args(target_params[target] + ['-v', '0.12.1',
                                         '-o', 'dist',
                                         '-p', target,
                                         '--appVersion', '2.0',
                                         '--cacheDir', 'nw_cache',
                                         '--buildType','versioned',
                                         'resources'])
        }
    }

targets.each() { target ->
        task "zip_${target}"(type: Zip) {
           from("dist/ProB/${target}/")
           into('ProB 2.0')
           destinationDir file('archives')
           archiveName("prob2_${target}")
        }
    }

task assemble(dependsOn: [tasks.withType(Exec).matching { task -> task.name.startsWith('buildClient_') },
                      tasks.withType(Zip).matching { task -> task.name.startsWith('zip_') }]) {

}

task check {}
